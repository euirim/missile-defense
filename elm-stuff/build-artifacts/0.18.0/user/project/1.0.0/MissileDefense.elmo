var _user$project$MissileDefense$view = function (model) {
	var style = _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'position', _1: 'fixed'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'top', _1: '50%'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'left', _1: '50%'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'transform', _1: 'translate(-50%, -50%)'},
						_1: {ctor: '[]'}
					}
				}
			}
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: style,
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('mdScreen'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _evancz$elm_graphics$Element$toHtml(
				_user$project$Graphics$renderWindow(model)),
			_1: {ctor: '[]'}
		});
};
var _user$project$MissileDefense$initialModel = A3(
	_user$project$Models$genInitialModel,
	_user$project$Variables$innerW,
	_user$project$Variables$baseY + _elm_lang$core$Basics$toFloat(_user$project$Variables$groundH),
	_user$project$Variables$maxSiloMs);
var _user$project$MissileDefense$reqRelClickPos = _elm_lang$core$Native_Platform.outgoingPort(
	'reqRelClickPos',
	function (v) {
		return {x: v.x, y: v.y};
	});
var _user$project$MissileDefense$recRelClickPos = _elm_lang$core$Native_Platform.incomingPort(
	'recRelClickPos',
	_elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Json_Decode$map,
					_elm_lang$core$Maybe$Just,
					A2(
						_elm_lang$core$Json_Decode$andThen,
						function (x) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (y) {
									return _elm_lang$core$Json_Decode$succeed(
										{x: x, y: y});
								},
								A2(_elm_lang$core$Json_Decode$field, 'y', _elm_lang$core$Json_Decode$float));
						},
						A2(_elm_lang$core$Json_Decode$field, 'x', _elm_lang$core$Json_Decode$float))),
				_1: {ctor: '[]'}
			}
		}));
var _user$project$MissileDefense$RandomNumber = function (a) {
	return {ctor: 'RandomNumber', _0: a};
};
var _user$project$MissileDefense$init = {
	ctor: '_Tuple2',
	_0: _user$project$MissileDefense$initialModel,
	_1: A2(
		_elm_lang$core$Random$generate,
		_user$project$MissileDefense$RandomNumber,
		A2(_elm_lang$core$Random$int, 1, 1000))
};
var _user$project$MissileDefense$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Noop':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Tick':
				if (_elm_lang$core$Native_Utils.eq(model.seed, _elm_lang$core$Maybe$Nothing)) {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					if (model.instructions) {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						if (_user$project$Utilities$gameIsOver(model)) {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{gOver: true}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							if (_user$project$Utilities$roundIsOver(model)) {
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{rOver: true}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								var mod = _user$project$Utilities$incomingM(model);
								var _p1 = A3(_user$project$Utilities$handleTick, mod.mSpeed, 8, mod);
								return {
									ctor: '_Tuple2',
									_0: _user$project$Utilities$handleSplits(
										_user$project$Utilities$blastCollateral(
											_user$project$Utilities$handleBlasts(
												_elm_lang$core$Native_Utils.update(
													mod,
													{
														missiles: _p1._0,
														blasts: A2(
															_elm_lang$core$Basics_ops['++'],
															_p1._1,
															A3(_user$project$Utilities$growBlasts, 0.4, _user$project$Variables$bRad, mod.blasts))
													})))),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							}
						}
					}
				}
			case 'AbsClick':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$MissileDefense$reqRelClickPos(_p0._0)
				};
			case 'RelClick':
				var _p2 = _p0._0;
				if (_p2.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var _p5 = _p2._0;
					var silo = A2(
						_user$project$Utilities$nearestASilo,
						model.silos,
						_user$project$Utilities$jsPosConvert(_p5));
					var p = _user$project$Utilities$jsPosConvert(_p5);
					if (model.instructions) {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{instructions: false}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						if (model.gOver) {
							return _user$project$MissileDefense$init;
						} else {
							if (model.rOver) {
								return {
									ctor: '_Tuple2',
									_0: _user$project$Utilities$endRound(model),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								var _p3 = silo;
								if (_p3.ctor === 'Nothing') {
									return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
								} else {
									var _p4 = _p3._0;
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Native_Utils.update(
											model,
											{
												missiles: {
													ctor: '::',
													_0: A3(_user$project$Models$newM, _p4.pos, _p4.pos, p),
													_1: model.missiles
												},
												silos: A2(
													_user$project$Utilities$replaceSilo,
													model.silos,
													_elm_lang$core$Native_Utils.update(
														_p4,
														{numMissiles: _p4.numMissiles - 1}))
											}),
										_1: _elm_lang$core$Platform_Cmd$none
									};
								}
							}
						}
					}
				}
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							seed: _elm_lang$core$Maybe$Just(
								_elm_lang$core$Random$initialSeed(_p0._0))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$MissileDefense$RelClick = function (a) {
	return {ctor: 'RelClick', _0: a};
};
var _user$project$MissileDefense$AbsClick = function (a) {
	return {ctor: 'AbsClick', _0: a};
};
var _user$project$MissileDefense$Tick = {ctor: 'Tick'};
var _user$project$MissileDefense$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Time$every,
				_elm_lang$core$Time$millisecond * 15,
				function (_p6) {
					return _user$project$MissileDefense$Tick;
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$mouse$Mouse$clicks(
					function (pos) {
						return _user$project$MissileDefense$AbsClick(pos);
					}),
				_1: {
					ctor: '::',
					_0: _user$project$MissileDefense$recRelClickPos(_user$project$MissileDefense$RelClick),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$MissileDefense$main = _elm_lang$html$Html$program(
	{init: _user$project$MissileDefense$init, view: _user$project$MissileDefense$view, update: _user$project$MissileDefense$update, subscriptions: _user$project$MissileDefense$subscriptions})();
var _user$project$MissileDefense$Noop = {ctor: 'Noop'};
